# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  formstack-backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      # Make table name accessible as environment variable from function code during execution
      Variables:
        AWS_DYNAMODB_ENDPOINT: http://docker.for.mac.host.internal:8000

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  getAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-all-users.getAllUsersHandler
      CodeUri: src/handlers/users/
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/
            Method: GET

  geUsertByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-user-by-id.getUserByIdHandler
      CodeUri: src/handlers/users/
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: GET

  putUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put-user.putUserHandler
      CodeUri: src/handlers/users/
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users/
            Method: POST

  searchVinylsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: search-vinyls.searchVinylsHandler
      CodeUri: src/handlers/vinyls/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /vinyls
            Method: GET

  getMyVinylsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-my-vinyls.getMyVinylsHandler
      CodeUri: src/handlers/vinyls/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersVinylsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /vinyls/my
            Method: GET

  getVinylByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-vinyl-by-id.getVinylByIdHandler
      CodeUri: src/handlers/vinyls/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /vinyls/{id}
            Method: GET

  addVinylToMyCollectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: add-vinyl-to-my-collection.addVinylToMyCollectionHandler
      CodeUri: src/handlers/vinyls/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersVinylsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /vinyls/{id}
            Method: POST

  removeVinylFromMyCollectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: remove-vinyl-from-my-collection.removeVinylFromMyCollectionHandler
      CodeUri: src/handlers/vinyls/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VinylsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /vinyls/{id}
            Method: DELETE

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
